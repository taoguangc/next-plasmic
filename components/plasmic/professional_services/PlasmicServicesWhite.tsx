// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qo8TRN16ADizSE4k432S4w
// Component: 4zm947eWGB-d

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_professional_services.module.css"; // plasmic-import: qo8TRN16ADizSE4k432S4w/projectcss
import sty from "./PlasmicServicesWhite.module.css"; // plasmic-import: 4zm947eWGB-d/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: 6EmGHJRkrRIE/icon

createPlasmicElementProxy;

export type PlasmicServicesWhite__VariantMembers = {};
export type PlasmicServicesWhite__VariantsArgs = {};
type VariantPropType = keyof PlasmicServicesWhite__VariantsArgs;
export const PlasmicServicesWhite__VariantProps = new Array<VariantPropType>();

export type PlasmicServicesWhite__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicServicesWhite__ArgsType;
export const PlasmicServicesWhite__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicServicesWhite__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
};

export interface DefaultServicesWhiteProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicServicesWhite__RenderFunc(props: {
  variants: PlasmicServicesWhite__VariantsArgs;
  args: PlasmicServicesWhite__ArgsType;
  overrides: PlasmicServicesWhite__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___4STbt)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__py6PQ)}
              role={"img"}
            />
          ),

          value: args.children
        })}
      </div>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__p0LKa)}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Services main",
            value: args.slot
          })}
        </h3>
        {p.renderPlasmicSlot({
          defaultContents:
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor .",
          value: args.slot2
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServicesWhite__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServicesWhite__VariantsArgs;
    args?: PlasmicServicesWhite__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicServicesWhite__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicServicesWhite__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicServicesWhite__ArgProps,
          internalVariantPropNames: PlasmicServicesWhite__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicServicesWhite__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicesWhite";
  } else {
    func.displayName = `PlasmicServicesWhite.${nodeName}`;
  }
  return func;
}

export const PlasmicServicesWhite = Object.assign(
  // Top-level PlasmicServicesWhite renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicServicesWhite
    internalVariantProps: PlasmicServicesWhite__VariantProps,
    internalArgProps: PlasmicServicesWhite__ArgProps
  }
);

export default PlasmicServicesWhite;
/* prettier-ignore-end */
